'''
import serial
import serial.tools.list_ports
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

# def find_serial_port():
#     """T·ª± ƒë·ªông t√¨m c·ªïng USB-TTL k·∫øt n·ªëi."""
#     ports = serial.tools.list_ports.comports()
#     for port in ports:
#         logging.info(f"Found port: {port.device} - {port.description}")
#         if "USB" in port.description or "ttyUSB" in port.device or "ttyACM" in port.device:
#             logging.info(f"Matched port: {port.device}")
#             return port.device
#     return None

# T√¨m c·ªïng USB-TTL
USE_PORT = "/dev/ttyUSB0"
BAUD_RATE = 115200
# if not USE_PORT:
#     logging.error("No suitable serial port found.")
#     exit()

# C·∫•u h√¨nh th√¥ng s·ªë Serial
# BAUD_RATE = 115200  # Thay ƒë·ªïi n·∫øu c·∫ßn
TIMEOUT = 1         # Th·ªùi gian ch·ªù d·ªØ li·ªáu

# try:
#     ser = serial.Serial(USE_PORT, BAUD_RATE, timeout=TIMEOUT)
#     logging.info(f"Connected to {USE_PORT} at {BAUD_RATE} baud.")
# except serial.SerialException as e:
#     logging.error(f"Failed to open serial port: {e}")
#     exit()

# def read_data():
#     """ƒê·ªçc d·ªØ li·ªáu t·ª´ c·ªïng n·ªëi ti·∫øp v√† in d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c"""
#     buffer = []
#     flag = False  
#     arr_data = []

#     while ser.in_waiting > 0:
#         byte = ord(ser.read(1))  
#         print(f"Received byte: {byte}")  # In t·ª´ng byte ƒë·ªÉ ki·ªÉm tra

#         if byte == 255:  
#             buffer = [byte]  
#             flag = True  
#         elif byte == 254 and flag:  
#             buffer.append(byte) 
#             if len(buffer[1:-1]) == 8:  
#                 arr_data = buffer[1:-1]
#                 print("Final arr_data:", arr_data)  # In m·∫£ng d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
#                 buffer = []  
#                 flag = False 
#             else:
#                 print("Incorrect data")
#         elif flag:
#             buffer.append(byte)

#     return arr_data
try:
    ser = serial.Serial(USE_PORT, BAUD_RATE, timeout=1)
    print(f"K·∫øt n·ªëi th√†nh c√¥ng v·ªõi {USE_PORT} ·ªü {BAUD_RATE} baud.")
except serial.SerialException as e:
    print(f"‚ùå L·ªói khi m·ªü c·ªïng serial: {e}")
    exit()
print("üì° ƒêang ch·ªù d·ªØ li·ªáu...")

def read_data():
    data = []
    start_flag = False  # C·ªù ƒë·ªÉ ki·ªÉm tra khi n√†o b·∫Øt ƒë·∫ßu ghi d·ªØ li·ªáu

    while ser.in_waiting > 0:
        byte = ord(ser.read(1))  
        
        # data = [byte]  # X√≥a d·ªØ li·ªáu c
        data.append(byte)  # L∆∞u byte v√†o danh s√°ch
        if len(data)==8:    
            print(f"D·ªØ li·ªáu hi·ªán t·∫°i: {data}")  # In d·ªØ li·ªáu ƒëang nh·∫≠n

    return data

# Ch·∫°y th·ª≠
while True:
    try:
        read_data()
        # if received_data:
        #     print(f"üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: {received_data}")
    except KeyboardInterrupt:
        print("\n‚èπ D·ª´ng ch∆∞∆°ng tr√¨nh.")
        ser.close()
        break
'''
import serial
import logging
import serial.tools.list_ports

logging.basicConfig(level=logging.INFO)

def find_serial_port():
    """T√¨m c·ªïng n·ªëi ti·∫øp th√≠ch h·ª£p"""
    ports = serial.tools.list_ports.comports()
    for port in ports:
        logging.info(f"Found port: {port.device} - {port.description}")
        if "USB" in port.description or "ttyUSB" in port.device or "ttyACM" in port.device:
            logging.info(f"Using port: {port.device}")
            return port.device
    return None

USE_PORT = find_serial_port()
BAUD_RATE = 115200  # Th·ª≠ ƒë·ªïi baud rate n·∫øu c·∫ßn
ser = None

if USE_PORT:
    try:
        ser = serial.Serial(USE_PORT, BAUD_RATE, timeout=2)
        logging.info("Serial port opened successfully.")
    except serial.SerialException as e:
        logging.error(f"Failed to open serial port: {e}")
        ser = None
else:
    logging.error("No suitable serial port found.")

if ser:
    while True:
        if ser.in_waiting > 0:
            raw_data = ser.read(ser.in_waiting)  # ƒê·ªçc to√†n b·ªô buffer
            logging.info(f"Raw data received: {raw_data}")  # Hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng byte



